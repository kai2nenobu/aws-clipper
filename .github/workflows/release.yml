name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build a package
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          depth: 0
      - name: Use Python 3.9
        uses: actions/setup-python@v5
        id: cp39
        with:
          python-version: "3.9"
      - name: Install poetry
        run: pipx install --python '${{ steps.cp39.outputs.python-path }}' "poetry<2.0"
      - name: Install poetry plugins
        run: poetry self add poetry-dynamic-versioning
      - name: Build
        run: poetry build
      - name: Archive a package
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/
  publish:
    name: Publish a package to PyPI
    runs-on: ubuntu-22.04
    needs: [build]
    environment: pypi
    permissions:
      id-token: write # mandatory for trusted publishing
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: package
          path: dist/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1          
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
  pyinstaller:
    needs: [build]
    runs-on: "${{ matrix.OS }}"
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - OS: ubuntu-22.04
            ARCH: linux-amd64
          - OS: macos-12
            ARCH: darwin-amd64
          - OS: windows-2022
            ARCH: windows-amd64
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: package
          path: dist/
      - name: Use latest stable Python
        uses: actions/setup-python@v5
        id: cp311
        with:
          python-version: "3.11"
      - name: Install pyinstaller & aws-clipper
        run: >-
          version=$(echo '${{ github.event.release.tag_name }}' | sed 's/^v//')
          && pipx install --python '${{ steps.cp311.outputs.python-path }}' pyinstaller
          && pipx inject pyinstaller dist/aws_clipper*.whl
      - name: Build a single executable
        run: make build-exe
      - name: Run executable
        run: ./dist/aws-clipper --version
      - uses: actions/upload-artifact@v4
        with:
          name: "exe-${{ matrix.ARCH }}"
          path: dist/aws-clipper*
      - name: Upload an executable as release assets
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        run: make upload-exe
        env:
          TAG_NAME: ${{  github.event.release.tag_name }}
          EXECUTABLE_SUFFIX: ${{ matrix.ARCH }}
          GITHUB_TOKEN: ${{ secrets.github_token }}
